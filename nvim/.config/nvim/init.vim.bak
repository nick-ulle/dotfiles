" Filename: init.vim
" Description: NeoVim configuration file
" Maintainer: Nick Ulle

" vim-plug -----{{{1

call plug#begin('~/.config/nvim/plugged')

" Utilities
Plug 'bling/vim-airline'
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-tmux-runner'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/vim-easy-align'
Plug 'PeterRincker/vim-argumentative'
Plug 'szw/vim-maximizer'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline-themes'

" Autocompletion.
Plug 'neovim/nvim-lspconfig'
"Plug 'autozimu/LanguageClient-neovim', {
"    \ 'branch': 'next',
"    \ 'do': 'bash install.sh',
"    \ }
Plug 'hrsh7th/nvim-compe'
"Plug  'ncm2/ncm2'
"Plug  'roxma/nvim-yarp'
"Plug  'ncm2/ncm2-bufword'
"Plug  'ncm2/ncm2-tmux'
"Plug  'ncm2/ncm2-path'
"Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"Plug 'zchee/deoplete-jedi'
"Plug 'racer-rust/vim-racer'

" Color Schemes
Plug 'chriskempson/base16-vim'

" Languages
Plug 'udalov/kotlin-vim'
Plug 'andrewmacp/llvm.vim'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'peterhoeg/vim-qml'
"Plug 'jalvesaq/Nvim-R'
Plug 'rust-lang/rust.vim'
"Plugin 'hdima/python-syntax'
"Plugin 'tmhedberg/SimpylFold'
"Plugin 'hynek/vim-python-pep8-indent'
Plug 'snakemake/snakemake', {'rtp': 'misc/vim'}

call plug#end()

" -----}}}
" Startup -----{{{1

" Store swap files in .vim.
set directory-=.
set directory+=~/.nvim/swap

filetype plugin indent on   " Turn on filetype detection.
set fileformats+=mac        " Use mac EOLs if not unix or dos.
set encoding=utf-8          " Set default encoding.
set autochdir               " Change directory on file load.
set autoread                " Read file on update.
let g:tex_flavor = "latex"  " Use LaTeX by default.

if has("win32") || has("win64")
    set shell=cmd
else
    set shell=bash
endif

"set timeoutlen=500  " Use short command timeout.

set ignorecase  " Ignore case when searching.
set smartcase   " Override 'ignorecase' when needed.
set hlsearch    " Highlight search results.

" -----}}}
" Plugin Settings -----{{{1

" Required by compe
set completeopt=menuone,noselect
let g:compe = {}
let g:compe.enabled = v:true
let g:compe.autocomplete = v:true
let g:compe.debug = v:false
let g:compe.min_length = 1
let g:compe.preselect = 'enable'
let g:compe.throttle_time = 80
let g:compe.source_timeout = 200
let g:compe.resolve_timeout = 800
let g:compe.incomplete_delay = 400
let g:compe.max_abbr_width = 100
let g:compe.max_kind_width = 100
let g:compe.max_menu_width = 100
let g:compe.documentation = v:true

let g:compe.source = {}
let g:compe.source.path = v:true
let g:compe.source.buffer = v:true
let g:compe.source.calc = v:true
let g:compe.source.nvim_lsp = v:true
let g:compe.source.nvim_lua = v:true
let g:compe.source.vsnip = v:true
let g:compe.source.ultisnips = v:true
let g:compe.source.luasnip = v:true
let g:compe.source.emoji = v:true

" Don't try to unzip zip files.
let g:loaded_zipPlugin = 1
let g:loaded_zip = 1

"let g:markdown_fenced_languages = [
"  \ 'html', 'python', 'bash=sh', 'r', 'llvm', 'c', 'cpp', 'ocaml'
"  \ ]

" Logs stored in /tmp/Language*
"let g:LanguageClient_loggingLevel = 'DEBUG'
"let g:LanguageClient_serverCommands = {
"    \ 'python': ['python', '-m', 'pyls'],
"    \ 'r': ['R', '--slave', '-e', 'languageserver::run()'],
"    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
"    \ }
"let g:LanguageClient_autoStart = 1
"let g:LanguageClient_rootMarkers = {
"    \ 'rust': ['Cargo.toml'],
"    \ }

lua << EOF
nvim_lsp = require('lspconfig')

nvim_lsp.r_language_server.setup{
  settings = {
    diagnostics = false
  }
}


EOF

" Restore minimized windows on entry.
let g:maximizer_restore_on_winleave = 1

" airline -----{{{2
" Enable airline special characters.
let g:airline_powerline_fonts = 1
let g:airline_theme = 'base16'
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#branch#enabled = 0     " Disable fugitive support.
let g:airline#extensions#bufferline#enabled = 0 " Disable bufferline support.
let g:airline#extensions#syntastic#enabled = 0  " Disable syntastic support.
let g:airline#extensions#tagbar#enabled = 0     " Disable tagbar support.
let g:airline#extensions#csv#enabled = 0
" -----}}}

" vim-pandoc -----{{{2
"let g:pandoc#modules#disabled = ['folding', 'toc', 'chdir', 'keyboard']
"let g:pandoc#formatting#mode = 'h'                  " Use hard wrapping.

let g:pandoc#syntax#style#use_definition_lists = 0  " Don't use def lists.
let g:pandoc#syntax#codeblocks#embeds#langs = [
  \ 'html', 'python', 'bash=sh', 'r', 'llvm', 'c', 'cpp', 'ocaml'
  \ ]
" -----}}}

" nvim-r -----{{{2
"let R_in_buffer = 0 "
let R_assign = 0
let R_wait = -1
let R_user_maps_only = 1 " Don
let R_csv_warn = 0
let rout_follow_colorscheme = 1
" -----}}}

" easy-align -----{{{2
let g:easy_align_ignore_groups = []

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" -----}}}

" vim-tmux-navigator -----{{{2
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-w>h :TmuxNavigateLeft<cr>
nnoremap <silent> <C-w>j :TmuxNavigateDown<cr>
nnoremap <silent> <C-w>k :TmuxNavigateUp<cr>
nnoremap <silent> <C-w>l :TmuxNavigateRight<cr>
" -----}}}

" deoplete -----{{{2
"let g:deoplete#enable_at_startup = 1
"let g:deoplete#disable_auto_complete = 1
"let g:deoplete#max_list = 20
"
"let g:deoplete#omni#functions = {}
"let g:deoplete#omni#functions.rust = 'racer#RacerComplete'
"
"let g:racer_cmd = '/usr/bin/racer'
" -----}}}

" -----}}}

" Mappings -----{{{1

" Swap ; and .
nnoremap . ;
nnoremap ; .

" Remap Q (ex mode) to play macros.
nnoremap Q @q

" Remap arrow keys to nav keys in normal/visual mode.
"noremap <left> <home>
"noremap <right> <end>
"noremap <up> <pageup>
"noremap <down> <pagedown>

" Move up and down screen lines, not file lines.
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk

" Make <c-w> work in terminal insert mode.
tnoremap <c-w> <c-\><c-n><c-w>
tnoremap <c-\><c-n><c-w><c-w> <c-w>
tnoremap <esc> <c-\><c-n>

" Make vertical split syntax match e[dit]/v[iew] syntax.
"cabbrev vsv vert sv
"cabbrev vse vs
cabbrev spt split <bar> terminal
cabbrev vst vsplit <bar> terminal

" Allow saving of files as sudo when I forget to start vim using sudo.
cabbrev w!! w !sudo tee > /dev/null %

" Make :Wq act like :wq, etc...
if has("user_commands")
    command! -bang -nargs=? -complete=file E e<bang> <args>
    command! -bang -nargs=? -complete=file W w<bang> <args>
    command! -bang -nargs=? -complete=file Wq wq<bang> <args>
    command! -bang -nargs=? -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
endif
" -----}}}
" Leader Mappings -----{{{1

" Set <leader> to s and <localleader> to ss
noremap s <nop>
noremap S <nop>
let mapleader = "s"
let maplocalleader = "S"

" Shortcuts for editing $MYVIMRC.
nnoremap <leader>ve :split $MYVIMRC<cr>
nnoremap <leader>vs :w<cr>:source $MYVIMRC<cr> 

" Copy to, delete to, and paste from clipboard.
vnoremap  <leader>y   "+y
nnoremap  <leader>y   "+y
nnoremap  <leader>yy  "+y$

vnoremap  <leader>d   "+d
nnoremap  <leader>d   "+d
nnoremap  <leader>dd  "+d$

nnoremap  <leader>p   "+p
vnoremap  <leader>p   "+p
nnoremap  <leader>P   "+P
vnoremap  <leader>P   "+P

" Shortcut for spellchecker.
nnoremap <leader>sp :set invspell <cr>

" Shortcut for REPLize.
"nnoremap <leader>o :call REPLize()<cr>
" -----}}}
" Plugin Mappings -----{{{1

" Language Client
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

" Tab is tab unless popup menu is open.
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Send line or selection to another tmux pane.
nnoremap <leader><return> :VtrSendLinesToRunner<cr>j
vnoremap <leader><return> :VtrSendLinesToRunner<cr>`>j
nnoremap <leader><tab> :VtrAttachToPane<cr>

" Make <tab> trigger deoplete.
"inoremap <silent><expr> <tab>
"		\ pumvisible() ? "\<c-n>" :
"		\ <SID>check_back_space() ? "\<tab>" :
"    \ deoplete#mappings#manual_complete()
"
"function! s:check_back_space() abort
"		let col = col('.') - 1
"		return !col || getline('.')[col - 1]  =~ '\s'
"endfunction
"
"" Make <bs> cancel deoplete.
"inoremap <expr><bs> deoplete#smart_close_popup()."\<c-h>"
" -----}}}
" Disabled Mappings -----{{{
" Disable the mouse.
set mouse=

" Disable arrow keys in insert mode.
inoremap <left> <nop>
inoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>

" Disable the help key.
nnoremap <F1> <esc>
inoremap <F1> <esc>
vnoremap <F1> <esc>

" -----}}}
" Autocommands -----{{{1

"augroup ncm2
"  autocmd!
"  autocmd BufEnter  *  call ncm2#enable_for_buffer()
"augroup END

augroup C
  autocmd!
  " Don't continue single-line C comments on new lines.
  autocmd FileType c,cpp :setlocal comments-=:// comments+=f://
augroup END

augroup git
  autocmd!
  " Wrap commit messages at 72 characters.
  autocmd FileType gitcommit :setlocal textwidth=72 colorcolumn=73
augroup END

augroup Python
  autocmd!
  " Indent 4 spaces, as per PEP 8.
  autocmd FileType python :setlocal tabstop=4 softtabstop=4 shiftwidth=4
augroup END

augroup R
  autocmd!
  "autocmd FileType r
  "  \ noremap <buffer><silent> <localleader>r :call StartR("R")<cr>
  "autocmd FileType r
  "  \ noremap <buffer><silent> <localleader>l :call SendLineToR("down")<cr>
  "autocmd FileType r setlocal omnifunc=LanguageClient#complete
augroup END

augroup tex
  autocmd!
  " Disable TeX indenting.
  autocmd FileType tex :setlocal indentexpr&
  " Use (== and ==) as fold markers.
  autocmd FileType tex :setlocal foldmarker=(==,==)
  " Use spell checking.
  autocmd BufNewFile,BufFilePre,BufRead *.md :setlocal invspell
augroup END

augroup markdown
  autocmd!
  " Use pandoc-markdown-syntax.
  autocmd BufNewFile,BufFilePre,BufRead *.md :setlocal filetype=pandoc
  " Use spell checking.
  autocmd BufNewFile,BufFilePre,BufRead *.md :setlocal invspell
augroup END

augroup yaml
    autocmd!
    " Disable YAML indenting.
    autocmd FileType yaml :setlocal indentexpr&
augroup END

augroup graphviz
  autocmd!
  autocmd BufNewFile,BufRead *.gv :setlocal filetype=dot
augroup END

augroup bugs
  autocmd!
  autocmd BufNewFile,BufRead *.bug :setlocal filetype=r
augroup END

" make Esc happen without waiting for timeoutlen
" fixes Powerline delay
augroup fast_escape
    autocmd!
    autocmd InsertEnter * set timeoutlen=0
    autocmd InsertLeave * set timeoutlen=500
augroup END 

" Always enter terminal in insert mode and leave in normal mode.
augroup term_insert
  autocmd!
  autocmd BufWinEnter,WinEnter term://* startinsert
  autocmd BufLeave term://* stopinsert
augroup END
" -----}}}

" Indenting & Wrapping -----{{{1

set expandtab       " Make <Tab> insert spaces.
set tabstop=2       " Make <Tab> count for 2 spaces.
set softtabstop=2   " Make <Tab> and <BS> treat spaces as tabs.

set autoindent      " Default to indent from previous line.
set shiftwidth=2    " Indent 2 spaces.
set shiftround      " Round indents to a multiple of 'shiftwidth'.

set textwidth=79    " Maximum line width.
set colorcolumn=80  " Make column 80 colorful.

"set linebreak               " Soft-wrap lines at sane locations.
"let &showbreak = '--- '     " Indicate soft-wrapped lines with '--- '.

set nojoinspaces        " Only insert one space between joined lines.
set foldmethod=marker   " Default to using vim fold markers.
set backspace=indent,eol,start  " Allow backspacing.

set formatoptions-=l    " Auto-wrap even in insert mode.
set formatoptions+=tn   " Text: auto-wrap, numbered lists
set formatoptions+=cjqr " Comments: auto-wrap, line joins, gq, auto-insert

" Use banner style indentation for curly bracket languages.
"set cinoptions=}1s
"
" Fix indentation for R.
let r_indent_align_args = 0
let r_indent_ess_comments = 0
let r_indent_ess_compatible = 0

" -----}}}
" Display -----{{{1

"set number              " Show line numbers.
"set relativenumber      " Use relative line numbers.
set numberwidth=4       " Make line numbers 4 columns wide.
set report=0            " Always report file modifications.
set display=lastline    " Show as much of last line as possible.
set scrolloff=8         " Keep 8 lines visible below current.

set showcmd     " Display partial commands in the last line.
set showmode    " Display the current mode in the last line.

set shortmess=aoOtTI
"             ||||||
"             |||||+-- Disable intro message.
"             ||||+--- Truncate long messages in the middle.
"             |||+---- Truncate long file names at the start.
"             ||+----- Message for reading file overwrites previous.
"             |+------ Message for reading file overwrites previous.
"             +------- Use abbreviated forms in messages.

" Split left to right and top to bottom.
set splitright
set splitbelow

"set completeopt-=preview
set completeopt=noinsert,menuone,noselect

" -----}}}
" Status Line -----{{{1

set laststatus=2    " Always show status line.

" Made obsolete by airline.
"set statusline=     " Clear the status line.
"set statusline+=%t  " File name.
"set statusline+=%{&l:modified?'\ [+]':''} " Modified flag.
"set statusline+=%(\ %r%h%w%)    " Read only, help, and preview flags.
"set statusline+=%=              " Align right.
"set statusline+={%{&ff}\ %{strlen(&fenc)?&fenc:'none'}}
"                |       |
"                |       +-- Show encoding.
"                +---------- Show format.
"set statusline+=\ {%l/%L,\ %c}
"                  |  |    |
"                  |  |    +-- Show cursor column.
"                  |  +------- Show total rows.
"                  +---------- Show cursor row.

" Store current and noncurrent status line format. Use subdued colors for
" noncurrent status line.
"let g:statusline_c = &g:statusline
"let g:statusline_nc = substitute(&g:statusline, '\v\%[2-9]\*', '', 'g')

" Automatically switch between current and noncurrent status lines.
"au WinEnter * let &l:statusline = g:statusline_c
"au WinLeave * let &l:statusline = g:statusline_nc

" -----}}}
" Highlighting -----{{{1

syntax on                           " Enable syntax highlighting.

if $TERM ==? "st-256color" || $TERM ==? "tmux-256color"
  set termguicolors                   " Enable 24-bit true color.
  colorscheme base16-solarized-light  " Set the color scheme.
else
  colorscheme base16-atelier-forest
end

"let base16colorspace=256           " Access colors present in 256 colorspace
"set t_Co=256                       " Use 256 colors.
"set background=light               " Use a light background.

" -----}}}

" GVIM -----{{{1

if has('gui_running')
    " Make GVim look better.
    "set guifont=monofur:h12
    "set guifont=monofur\ 12
    set background=light    " Fix for xterm color-inversion weirdness.
    set guifont=Inconsolata\ for\ Powerline\ 12
    set guioptions+=rLTm    " Add flags first to fix bug.
    set guioptions-=rLTm
    "               ||||
    "               |||+- Hide the menu.
    "               ||+-- Hide the toolbar.
    "               |+--- Hide vertical scrollbar on split windows.
    "               +---- Always hide vertical scrollbar.
    set guioptions+=c " Use console dialogs.
endif

" -----}}}
