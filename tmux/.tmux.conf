
# Bugfix for tmux issue #1264.
set -as terminal-overrides ',st*:Ss@'

# Remove all keybindings.
unbind -a

# Use F14 (S-F2) as prefix.
set -g prefix S-F2 #C-e
# A send-prefix is not needed. Who uses F14?
#bind C-F8 send-prefix

# Utility keys.
bind bspace source-file ~/.tmux.conf
bind : command-prompt
bind ? list-keys

# --- Settings {{{
#
# Set large scrollback buffer.
set -g history-limit 5000

# Don't delay the escape key.
set -g escape-time 0

# Use 256 colors.
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",st-256color:Tc"

# Use sane pane and window numbering.
set -g base-index 1
set -g renumber-windows "on"
set -g pane-base-index 1

# Enable mouse.
set -g mouse "on"

# Use vi-keys.
setw -g status-keys vi
setw -g mode-keys vi

# --- }}}

# --- Aesthetics {{{

set -g pane-border-style "fg=colour21"
set -g pane-active-border-style "fg=colour21"

# Set up the status line.
set -g status-style "fg=colour19,bg=colour21"
set -g status-left ""
set -g window-status-format "   #{window_name}"
set -g window-status-current-format "   #{window_name}"
set -g status-right "Session #{session_name} "

set -g message-command-style "fg=colour19,bg=colour21"
set -g message-style "fg=colour19,bg=colour21"
#set -g mode-style "fg=colour00,bg=colour20"
set -g mode-style "fg=colour21,bg=colour12"


# --- }}}

# --- Windows {{{

# Focus window.
bind 1 select-window -t :=1
bind 2 select-window -t :=2
bind 3 select-window -t :=3
bind 4 select-window -t :=4
bind 5 select-window -t :=5
bind 6 select-window -t :=6
bind 7 select-window -t :=7
bind 8 select-window -t :=8
bind 9 select-window -t :=9
bind 0 select-window -t :=0

# Send to window.
bind "!"  select-pane -m \; select-window -t :=1 \; join-pane \; select-pane -M
bind "@"  select-pane -m \; select-window -t :=2 \; join-pane \; select-pane -M
bind "#"  select-pane -m \; select-window -t :=3 \; join-pane \; select-pane -M
bind "\$" select-pane -m \; select-window -t :=4 \; join-pane \; select-pane -M
bind "%"  select-pane -m \; select-window -t :=5 \; join-pane \; select-pane -M
bind "^"  select-pane -m \; select-window -t :=6 \; join-pane \; select-pane -M
bind "&"  select-pane -m \; select-window -t :=7 \; join-pane \; select-pane -M
bind "*"  select-pane -m \; select-window -t :=8 \; join-pane \; select-pane -M
bind "("  select-pane -m \; select-window -t :=9 \; join-pane \; select-pane -M
bind ")"  select-pane -m \; select-window -t :=0 \; join-pane \; select-pane -M

# Split panes like vim.
bind s split-window -v -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"

bind c new-window -c "#{pane_current_path}"

# --- }}}

# --- Panes {{{

# Focus panes, forwarding keys to Neovim as needed.
is_vim='echo "#{pane_current_command}" | rg -iqF "nvim"'
bind h if-shell "$is_vim" "send-keys C-w h" "select-pane -L"
bind j if-shell "$is_vim" "send-keys C-w j" "select-pane -D"
bind k if-shell "$is_vim" "send-keys C-w k" "select-pane -U"
bind l if-shell "$is_vim" "send-keys C-w l" "select-pane -R"

bind Left if-shell "$is_vim" "send-keys C-w h" "select-pane -L"
bind Down if-shell "$is_vim" "send-keys C-w j" "select-pane -D"
bind Up if-shell "$is_vim" "send-keys C-w k" "select-pane -U"
bind Right if-shell "$is_vim" "send-keys C-w l" "select-pane -R"

# Reorient panes.
bind H move-pane -v -t '{left-of}'
bind J move-pane -h -t '{down-of}'
bind K move-pane -h -t '{up-of}'
bind L move-pane -v -t '{right-of}'

bind S-Left move-pane -v -t '{left-of}'
bind S-Down move-pane -h -t '{down-of}'
bind S-Up move-pane -h -t '{up-of}'
bind S-Right move-pane -v -t '{right-of}'

# Swap panes.
bind C-h swap-pane -t '{left-of}'  \; select-pane -t '{last}'
bind C-j swap-pane -t '{down-of}'  \; select-pane -t '{last}'
bind C-k swap-pane -t '{up-of}'    \; select-pane -t '{last}'
bind C-l swap-pane -t '{right-of}' \; select-pane -t '{last}'

bind C-Left swap-pane -t '{left-of}'  \; select-pane -t '{last}'
bind C-Down swap-pane -t '{down-of}'  \; select-pane -t '{last}'
bind C-Up swap-pane -t '{up-of}'    \; select-pane -t '{last}'
bind C-Right swap-pane -t '{right-of}' \; select-pane -t '{last}'

# Kill panes.
bind q confirm-before -p "Kill #{pane_current_command}? (y/n)" kill-pane

# Monocle on current pane.
bind space resize-pane -Z

# Focus last pane.
bind Tab last-pane

# Break pane.
bind b break-pane

# Identify panes.
bind i display-panes

# Resize panes mode.
bind r switch-client -T resize
bind -T resize S-F2 switch-client -T prefix

bind -T resize -r h resize-pane -L
bind -T resize -r j resize-pane -D
bind -T resize -r k resize-pane -U
bind -T resize -r l resize-pane -R

bind -T resize -r Left resize-pane -L
bind -T resize -r Down resize-pane -D
bind -T resize -r Up resize-pane -U
bind -T resize -r Right resize-pane -R

# Mouse 1 selects panes.
bind-key -T root MouseDown1Pane select-pane -t '{mouse}' \; send-keys -M

bind-key -T root MouseDrag1Border resize-pane -M
bind-key -T root MouseDown1Status select-window -t '{mouse}'

# --- }}}

# --- Session {{{

bind "\\" choose-session -F \
  "Attach session #{session_name} (#{session_attached} attached; #{session_windows} windows)"

bind Q choose-session -F \
  "Kill session #{session_name} (#{session_attached} attached; #{session_windows} windows)" \
  "kill-session -t %%"

# }}}

# --- Copy Mode {{{

# Enter copy mode.
bind S-F2   copy-mode
bind Escape copy-mode
#bind Up     copy-mode -u

bind p run-shell "tmux set-buffer \"$(xsel -b -o)\"" \; paste-buffer

bind -T copy-mode-vi Escape send -X cancel

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi r send -X rectangle-toggle

bind -T copy-mode-vi y send -X copy-pipe-and-cancel "xsel -b -i"
bind -T copy-mode-vi Y send -X copy-line

# Remap Up/Down as PgUp/PgDn.
# bind -T copy-mode-vi Left  send -X start-of-line
# bind -T copy-mode-vi Right send -X end-of-line
# bind -T copy-mode-vi Up    send -X page-up
# bind -T copy-mode-vi Down  send -X page-down

# Mouse scroll and drag enter copy mode.
bind -n WheelUpPane \
  if-shell -Ft= '#{?mouse_any_flag,1,#{alternate_on}}' \
  "send-keys -M" \
  "if -Ft {mouse} '#{pane_in_mode}' 'send-keys -M' 'copy-mode -et {mouse}'"

bind -n MouseDrag1Pane \
  if-shell -Ft {mouse} "#{mouse_any_flag}" \
  "if-shell -Ft {mouse} '#{pane_in_mode}' 'copy-mode -M' 'send-keys -M'" \
  "copy-mode -M"

# Mouse copies to clipboard.
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe "xsel -b -i"

# --- }}}

# Experimental
bind d split-window -h -b -c "#{pane_current_path}/R" \; \
  select-pane -R \; \
  split-window -v -b -c "#{pane_current_path}/tests/testthat" \; \
  select-pane -L
